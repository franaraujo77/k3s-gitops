apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: nfs-client-hassio
  namespace: apps
  annotations:
    storageclass.kubernetes.io/is-default-class: "false"
provisioner: k8s-sigs.io/nfs-subdir-external-provisioner # or choose another name, must match deployment's env PROVISIONER_NAME'
volumeBindingMode: WaitForFirstConsumer
parameters:
  pathPattern: "apps/nfs-client-hassio"
  onDelete: retain
  accessModes: ReadWriteMany
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: home-assistant-config-file
  namespace: apps
data:
  configuration.yaml: |
    # Configure a default setup of Home Assistant (frontend, api, etc)
    default_config:

    # Text to speech
    tts:
      - platform: google_translate

    #group: !include groups.yaml
    #automation: !include automations.yaml
    #script: !include scripts.yaml
    #scene: !include scenes.yaml

    http:
      use_x_forwarded_for: true
      trusted_proxies:
        - 192.168.15.73
        - 192.168.15.0/24
        - 127.0.0.1
    
    influxdb:
      api_version: 2
      ssl: false
      host: influxdb.database
      #host: influxdb.apps
      port: 8086
      token: wgXSklpkhpbZXGEZvojQhwPH-l_bc1dipFksMbvVoePLzdZlKCZoMSgUwVV2UFACaQa0egMiGVwX58S2vcBm1A==
      organization: 8f380de9376985bb
      bucket: home-assistant
      tags:
        source: HA
      tags_attributes:
        - friendly_name
      default_measurement: units
      exclude:
        entities:
          - zone.home
        domains:
          - persistent_notification
          - person
      include:
        domains:
          - sensor
          - binary_sensor
        entities:
          - weather.home

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: home-assistant-data
  namespace: apps
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: nfs-client-hassio
  resources:
    requests:
      storage: 5Gi